{
	"data": {
		"javascript": {
			"general": [
				{
					"q": "What is the diffence between var and let keywords?",
					"a": "var was introduced with JS. let is introduced with ES6. var has function scope, let has block scope. var gets hoisted but let doesn't."
				},
				{
					"q": "What is the difference between == and ===?",
					"a": "== compares the value not type. But === compares value and type."
				},
				{
					"q": "What is the diffence between let and const keywords?",
					"a": "You can reassign a value to let as much as you want. But you can not reassign a value to const."
				},
				{
					"q": "What is the diffence between undefined and null keywords?",
					"a": "They both represent an empty value. But undefined is type of undefined and null is type of object."
				},
				{
					"q": "What is use of Arrow function?",
					"a": "Normal functions bind 'this' to window's this. But arrow functions don'have their own this so it works well as object methods."
				},
				{
					"q": "What is prototypal inheritance?",
					"a": "Every object has a property called prototype. When you create new objects from an object will automatically inherit the property of its parent. Not by including in itself but instead it uses from it's parent."
				},
				{
					"q": "What is the difference between function declaration & function expression?",
					"a": "Function expressions can not be executed before function declarations. Because function scope stacked before variable scope in runtime of Javascript. And when you pass a function into another function, you need to pass the function expression."
				},
				{
					"q": "What is promises and why do we use it?",
					"a": "When we want to make an async call which has to wait for something to happen. And once it comes back you exit with a callback function. And within that callback function you might need another async call which waits for another callback. So it could become kind of callback hell. To simplify this process we use promises."
				},
				{
					"q": "setTimeout() issue?",
					"a": "setTimeout always gets executed after stack finishes even it has 0 timeout value. Because it's an async operation."
				},
				{
					"q": "What is closure and how do we use it?",
					"a": "When a function returns another function the returning function will hold its environment, basically all variables that it needs. We can see it inside the scopes property of the function."
				}
			]
		},
		"node": {
			"general": [
				{
					"q": "What is the difference between JavaScript and Node.js?",
					"a": "JS is the language, NodeJS is the interpreter and environment for JS. JS runs on browser based engines, NodeJS runs on Google's V8. JS used for any client-side activity for a web app but NodeJS can be used for"
				}
			]
		},
		"react": {
			"general": [
				{
					"q": "What tools do you use for your project and why?",
					"a": "Webpack, React Router and Typescript, because they're industry standards."
				},
				{
					"q": "What testing strategy do you use?",
					"a": "I use Test-Driven-Development for logic and automated UI tests for the rest"
				},
				{
					"q": "How do you handle component reuse?",
					"a": "I refactor when I see duplication but some components are generic."
				},
				{
					"q": "When do you use SSR and why?",
					"a": "I used it with NextJS and custom express server for SEO purposes before, but I don't work that much in Node."
				},
				{
					"q": "What tasks do you run and how?",
					"a": "I try to use a task runner like Gulp and Webpack for bundling. Because when you put everything in webpack it may cause a very big productivity problem depending on size of the project."
				},
				{
					"q": "When do you use component based testing and why?",
					"a": "I use Jest but only for generic components since I use UI testing mostly."
				},
				{
					"q": "Do you use Test-Driven-Development and how?",
					"a": "I find it hard to use TDD for components so I use it for logic."
				},
				{
					"q": "What state do you put where and why?",
					"a": "I only put shared data on the store and private data on the state."
				},
				{
					"q": "What's more important, clean code or good enough?",
					"a": "I try to write clean code but sometimes I need to hack things together."
				},
				{
					"q": "How do you handle bundling performance?",
					"a": "There are loaders for it but mostly I try to reduce the bundling process. For example scope hoisting with moduleConcatenationPlugin. Webpack saves its require method call by inlining its helper method and also saves access to the modules array. Or treeshaking, importing by module name as much as possible. Chunk splitting, brotli compressions."
				},
				{
					"q": "How do you handle multiple component variants in the same codebase?",
					"a": "I raise awareness in the company and take action after that."
				},
				{
					"q": "How do you handle feature toggling? (like some features are off or on)",
					"a": "I use a config file or similar."
				},
				{
					"q": "How do you avoid component duplication?",
					"a": "It is hard to solve this so I talk to the teams and use good names like spesific names for its context."
				},
				{
					"q": "How do you handle A/B testing?",
					"a": "I create a temporary component in isolation."
				},
				{
					"q": "How do you handle branding/themes?",
					"a": "I use a variant prop in the components."
				},
				{
					"q": "How do you handle translations?",
					"a": "I would get them from an external tool."
				},
				{
					"q": "Imperative vs Declarative - reason of React?",
					"a": "Instead of saying one by one, to this and that happens, we declare actions it the state of our app and React automaticaly just does it for us. So, this results in less complexity and better code quality and faster development times. So whatever your state is, it just reacts to it and make necessary chantges without touching the dom."
				},
				{
					"q": "What is the job of React developer?",
					"a": "Decide on components, decide the state and where it lives, what changes when state changes."
				}
			],
			"redux": [
				{
					"q": "What is Flux?",
					"a": "Flux is an application design paradigm used as a replacement for the more traditional MVC pattern. It is not a framework or a library but a new kind of architecture that complements React and the concept of Unidirectional Data Flow. Facebook used this pattern internally when working with React The workflow between dispatcher, stores and views components with distinct inputs and outputs as follows: View -> Action -> Dispatcher -> Store -> View..."
				},
				{
					"q": "What is Redux?",
					"a": "Redux is a predictable state container for JavaScript apps based on the Flux design pattern. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies."
				},
				{
					"q": "What is store in Redux?",
					"a": "The store holds the application state and supplies the helper methods for accessing the state. We can register to listeners bia subscribe method and dispatch actions from reducers. There is only one Store while using Redux. The store is configured via the createStore function. The single store represents the entire state. Reducers return a state via action."
				},
				{
					"q": "What are reducers in Redux?",
					"a": "The reducer is a pure function that takes the previous state and an action, and returns the next state. (prevState, action) => newState. It's called a reducer because it's the type of function you would pass to Array.prototype.reduce(reducer, initialValue). It's very important that the reducer stays pure. You should never mutate its arguments, perform side-effects like API calls and routing transitions, call non-pure functions, e.g. Date.now or Math.random."
				},
				{
					"q": "How to use connect from React Redux?",
					"a": "Use mapStateToProps(state): It maps the state variables from your store to the props that you specify. You need to return the required object from the state, then you need to wrap component with connect as a HOC. E.g export default connect(mapStateToProps)(App). Or you can map you action dispatchers via mapDispatchToProps(dispatch). You need to import your action first like import {addArticle} from './actions' then mapDispatchToProps = (dispatch) => addArticle: article => dispatch(addArticle(article)). On export; export default connect(null, mapDispatchToProps)(App). If mapStateToProps is absent, we need to pass null at first otherwise we'll get TypeError: dispatch is not a function."
				},
				{
					"q": "What is the difference between React context and React Redux?",
					"a": "You can use Context in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for. Whereas Redux is much more powerful and provides a large number of features that the Context Api doesn't provide. Also, React Redux uses context internally but it doesnâ€™t expose this fact in the public API. So you should feel much safer using context via React Redux than directly because if it changes, the burden of updating the code will be on React Redux instead developer responsibility."
				},
				{
					"q": "What is a Redux middleware?",
					"a": "Redux middleware is a function that is able to intercept and act accordingly on our Redux actions before they reach the reducer. You can use applyMiddleware func where you can pass each piece of middleware as a new argument. So you just need to pass each piece of middleware you'd like."
				},
				{
					"q": "What is Redux Thunk?",
					"a": "Redux Thunk middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods dispatch and getState() as parameters."
				},
				{
					"q": "How to structure Redux top level directories?",
					"a": "1. Components; used for dumb React components unaware of Redux. 2. Containers; used for smart React components connected to Redux. 3. Actions; used for all action creators, where file name corresponds to part of the app. 4. Reducers; used for all reducers, where file name corresponds to state key. 5. Store; used for store initialization."
				}
			],
			"hooks": []
		}
	}
}